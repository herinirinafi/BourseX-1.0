#!/usr/bin/env python
"""
Script d'initialisation et de test pour BourseX
Ce script configure la base de donn√©es et teste toutes les fonctionnalit√©s
"""

import os
import sys
import django
from decimal import Decimal
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'boursex_api.settings')
django.setup()

from django.contrib.auth.models import User
from django.core.management import execute_from_command_line
from core.models import (
    UserProfile, Stock, StockPriceHistory, Portfolio, 
    Transaction, Mission, UserMission, Watchlist
)

def setup_database():
    """Cr√©er et migrer la base de donn√©es"""
    print("üîß Configuration de la base de donn√©es...")
    
    try:
        # Cr√©er les migrations
        execute_from_command_line(['manage.py', 'makemigrations', 'core'])
        print("‚úÖ Migrations cr√©√©es avec succ√®s")
        
        # Appliquer les migrations
        execute_from_command_line(['manage.py', 'migrate'])
        print("‚úÖ Migrations appliqu√©es avec succ√®s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration de la base de donn√©es: {e}")
        return False

def create_sample_data():
    """Cr√©er des donn√©es d'exemple"""
    print("üìä Cr√©ation des donn√©es d'exemple...")
    
    try:
        # Cr√©er des cryptomonnaies d'exemple
        cryptocurrencies = [
            {'symbol': 'BTC', 'name': 'Bitcoin', 'price': '50000.00'},
            {'symbol': 'ETH', 'name': 'Ethereum', 'price': '3000.00'},
            {'symbol': 'ADA', 'name': 'Cardano', 'price': '1.50'},
            {'symbol': 'DOT', 'name': 'Polkadot', 'price': '25.00'},
            {'symbol': 'SOL', 'name': 'Solana', 'price': '100.00'},
            {'symbol': 'MATIC', 'name': 'Polygon', 'price': '2.00'},
            {'symbol': 'AVAX', 'name': 'Avalanche', 'price': '80.00'},
            {'symbol': 'LINK', 'name': 'Chainlink', 'price': '15.00'},
        ]
        
        stocks_created = 0
        for crypto in cryptocurrencies:
            stock, created = Stock.objects.get_or_create(
                symbol=crypto['symbol'],
                defaults={
                    'name': crypto['name'],
                    'current_price': Decimal(crypto['price']),
                    'volume': 1000000
                }
            )
            if created:
                stocks_created += 1
                
                # Cr√©er un historique de prix
                for i in range(10):
                    base_price = Decimal(crypto['price'])
                    variation = Decimal(str(1 + (i * 0.01)))  # Variation de 1% par entr√©e
                    StockPriceHistory.objects.create(
                        stock=stock,
                        price=base_price * variation
                    )
        
        print(f"‚úÖ {stocks_created} cryptomonnaies cr√©√©es")
        
        # Cr√©er des missions d'exemple
        sample_missions = [
            {
                'title': 'Premier Trade',
                'description': 'Effectuez votre premier achat de cryptomonnaie',
                'mission_type': 'ACHIEVEMENT',
                'reward_xp': 50,
                'reward_money': '100.00',
                'requirement': {'type': 'trade_count', 'target': 1}
            },
            {
                'title': 'Trader Quotidien',
                'description': 'Effectuez 5 trades en une journ√©e',
                'mission_type': 'DAILY',
                'reward_xp': 100,
                'reward_money': '200.00',
                'requirement': {'type': 'daily_trades', 'target': 5}
            },
            {
                'title': 'Constructeur de Portfolio',
                'description': 'Atteignez une valeur de portfolio de 1000$',
                'mission_type': 'ACHIEVEMENT',
                'reward_xp': 200,
                'reward_money': '500.00',
                'requirement': {'type': 'portfolio_value', 'target': 1000}
            },
            {
                'title': 'Hodler',
                'description': 'Gardez un actif pendant une semaine',
                'mission_type': 'WEEKLY',
                'reward_xp': 150,
                'reward_money': '300.00',
                'requirement': {'type': 'hold_duration', 'target': 7}
            },
            {
                'title': 'Diversification',
                'description': 'Poss√©dez au moins 3 cryptomonnaies diff√©rentes',
                'mission_type': 'ACHIEVEMENT',
                'reward_xp': 120,
                'reward_money': '250.00',
                'requirement': {'type': 'portfolio_diversity', 'target': 3}
            }
        ]
        
        missions_created = 0
        for mission_data in sample_missions:
            mission, created = Mission.objects.get_or_create(
                title=mission_data['title'],
                defaults=mission_data
            )
            if created:
                missions_created += 1
        
        print(f"‚úÖ {missions_created} missions cr√©√©es")
        
        # Cr√©er un utilisateur de test
        test_user, created = User.objects.get_or_create(
            username='testuser',
            defaults={
                'email': 'test@boursex.com',
                'first_name': 'Test',
                'last_name': 'User'
            }
        )
        
        if created:
            test_user.set_password('testpass123')
            test_user.save()
            print("‚úÖ Utilisateur de test cr√©√© (testuser/testpass123)")
            
            # Cr√©er le profil utilisateur
            UserProfile.objects.get_or_create(
                user=test_user,
                defaults={
                    'balance': Decimal('10000.00'),
                    'xp': 0,
                    'level': 1
                }
            )
            print("‚úÖ Profil utilisateur cr√©√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
        return False

def test_trading_functionality():
    """Tester les fonctionnalit√©s de trading"""
    print("üéÆ Test des fonctionnalit√©s de trading...")
    
    try:
        # R√©cup√©rer l'utilisateur de test et Bitcoin
        test_user = User.objects.get(username='testuser')
        btc_stock = Stock.objects.get(symbol='BTC')
        user_profile = UserProfile.objects.get(user=test_user)
        
        initial_balance = user_profile.balance
        print(f"üí∞ Solde initial: ${initial_balance}")
        
        # Simuler un achat
        quantity = Decimal('0.1')
        total_cost = quantity * btc_stock.current_price
        
        if user_profile.balance >= total_cost:
            # Cr√©er une transaction d'achat
            transaction = Transaction.objects.create(
                user=test_user,
                stock=btc_stock,
                transaction_type='BUY',
                quantity=quantity,
                price=btc_stock.current_price,
                total_amount=total_cost
            )
            
            # Mettre √† jour le solde
            user_profile.balance -= total_cost
            user_profile.xp += 10
            user_profile.save()
            
            # Cr√©er/mettre √† jour le portfolio
            portfolio_item, created = Portfolio.objects.get_or_create(
                user=test_user,
                stock=btc_stock,
                defaults={
                    'quantity': quantity,
                    'average_price': btc_stock.current_price
                }
            )
            
            if not created:
                # Calculer le nouveau prix moyen
                total_quantity = portfolio_item.quantity + quantity
                total_invested = (portfolio_item.quantity * portfolio_item.average_price) + total_cost
                portfolio_item.average_price = total_invested / total_quantity
                portfolio_item.quantity = total_quantity
                portfolio_item.save()
            
            print(f"‚úÖ Achat simul√©: {quantity} BTC pour ${total_cost}")
            print(f"üí∞ Nouveau solde: ${user_profile.balance}")
            print(f"‚≠ê XP gagn√©: 10 (Total: {user_profile.xp})")
            
            # V√©rifier le portfolio
            portfolio_value = sum(
                item.quantity * item.stock.current_price 
                for item in Portfolio.objects.filter(user=test_user)
            )
            print(f"üìä Valeur du portfolio: ${portfolio_value}")
            
            return True
        else:
            print("‚ùå Solde insuffisant pour le test")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de trading: {e}")
        return False

def test_gamification():
    """Tester le syst√®me de gamification"""
    print("üéØ Test du syst√®me de gamification...")
    
    try:
        test_user = User.objects.get(username='testuser')
        user_profile = UserProfile.objects.get(user=test_user)
        
        # Cr√©er des missions utilisateur
        active_missions = Mission.objects.filter(is_active=True)[:3]
        missions_created = 0
        
        for mission in active_missions:
            user_mission, created = UserMission.objects.get_or_create(
                user=test_user,
                mission=mission,
                defaults={
                    'is_completed': False,
                    'progress': Decimal('0.00')
                }
            )
            if created:
                missions_created += 1
        
        print(f"‚úÖ {missions_created} missions assign√©es √† l'utilisateur")
        
        # Simuler la progression d'une mission
        first_mission = UserMission.objects.filter(user=test_user).first()
        if first_mission:
            first_mission.progress = Decimal('50.00')
            first_mission.save()
            print(f"‚úÖ Mission '{first_mission.mission.title}' - Progression: 50%")
        
        # Calculer le niveau bas√© sur l'XP
        required_xp_for_next_level = user_profile.level * 100
        print(f"üìà Niveau actuel: {user_profile.level}")
        print(f"‚≠ê XP actuel: {user_profile.xp}/{required_xp_for_next_level}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de gamification: {e}")
        return False

def test_api_endpoints():
    """Tester les endpoints API (simulation)"""
    print("üîó Test des endpoints API...")
    
    try:
        # Compter les donn√©es disponibles
        stocks_count = Stock.objects.count()
        missions_count = Mission.objects.count()
        users_count = User.objects.count()
        transactions_count = Transaction.objects.count()
        
        print(f"‚úÖ Stocks disponibles: {stocks_count}")
        print(f"‚úÖ Missions disponibles: {missions_count}")
        print(f"‚úÖ Utilisateurs: {users_count}")
        print(f"‚úÖ Transactions: {transactions_count}")
        
        # Tester les requ√™tes principales
        if stocks_count > 0:
            sample_stock = Stock.objects.first()
            print(f"üìä Stock exemple: {sample_stock.symbol} - ${sample_stock.current_price}")
            
            # Historique des prix
            price_history_count = sample_stock.price_history.count()
            print(f"üìà Historique de prix pour {sample_stock.symbol}: {price_history_count} entr√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des endpoints: {e}")
        return False

def generate_summary_report():
    """G√©n√©rer un rapport de r√©sum√©"""
    print("\n" + "="*60)
    print("üìã RAPPORT DE R√âSUM√â - BourseX")
    print("="*60)
    
    try:
        # Statistiques g√©n√©rales
        stocks_count = Stock.objects.count()
        users_count = User.objects.count()
        transactions_count = Transaction.objects.count()
        missions_count = Mission.objects.count()
        
        print(f"üìä Cryptomonnaies: {stocks_count}")
        print(f"üë• Utilisateurs: {users_count}")
        print(f"üíº Transactions: {transactions_count}")
        print(f"üéØ Missions: {missions_count}")
        
        # D√©tails par utilisateur
        for user in User.objects.all():
            try:
                profile = UserProfile.objects.get(user=user)
                portfolio_items = Portfolio.objects.filter(user=user)
                portfolio_value = sum(
                    item.quantity * item.stock.current_price 
                    for item in portfolio_items
                )
                
                print(f"\nüë§ Utilisateur: {user.username}")
                print(f"   üí∞ Solde: ${profile.balance}")
                print(f"   üìä Valeur portfolio: ${portfolio_value}")
                print(f"   ‚≠ê XP: {profile.xp} (Niveau {profile.level})")
                print(f"   üìà Cryptos d√©tenues: {portfolio_items.count()}")
                
            except UserProfile.DoesNotExist:
                print(f"\nüë§ Utilisateur: {user.username} (pas de profil)")
        
        # Top cryptomonnaies
        print(f"\nüíé TOP CRYPTOMONNAIES:")
        for i, stock in enumerate(Stock.objects.order_by('-current_price')[:5], 1):
            print(f"   {i}. {stock.symbol} ({stock.name}): ${stock.current_price}")
        
        print(f"\nüéÆ FONCTIONNALIT√âS DISPONIBLES:")
        print("   ‚Ä¢ Trading buy/sell de cryptomonnaies")
        print("   ‚Ä¢ Syst√®me de gamification (XP, niveaux)")
        print("   ‚Ä¢ Missions et r√©compenses")
        print("   ‚Ä¢ Portfolio et historique de prix")
        print("   ‚Ä¢ Watchlist personnalis√©e")
        print("   ‚Ä¢ Dashboard avec statistiques")
        
        print(f"\nüöÄ APPLICATION PR√äTE POUR LES TESTS!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")

def main():
    """Fonction principale"""
    print("üéÆ BourseX - Configuration et Test Complet")
    print("="*50)
    print("üì± Application de trading de cryptomonnaies gamifi√©e")
    print("="*50)
    
    success_count = 0
    total_tests = 5
    
    # 1. Configuration de la base de donn√©es
    if setup_database():
        success_count += 1
    
    # 2. Cr√©ation des donn√©es d'exemple
    if create_sample_data():
        success_count += 1
    
    # 3. Test du trading
    if test_trading_functionality():
        success_count += 1
    
    # 4. Test de la gamification
    if test_gamification():
        success_count += 1
    
    # 5. Test des endpoints
    if test_api_endpoints():
        success_count += 1
    
    # Rapport final
    print(f"\nüìä R√âSULTATS: {success_count}/{total_tests} tests r√©ussis")
    
    if success_count == total_tests:
        print("üéâ TOUS LES TESTS SONT PASS√âS!")
        print("‚úÖ Votre application BourseX est enti√®rement fonctionnelle!")
    elif success_count >= 3:
        print("‚úÖ La plupart des fonctionnalit√©s marchent!")
        print("üîß Quelques ajustements mineurs recommand√©s")
    else:
        print("‚ö†Ô∏è Plusieurs probl√®mes d√©tect√©s")
        print("üõ†Ô∏è V√©rifiez la configuration Django")
    
    generate_summary_report()
    
    print(f"\nüöÄ Pour d√©marrer le serveur:")
    print("   cd Backend")
    print("   python manage.py runserver")
    print(f"\nüì± Pour tester l'API:")
    print("   http://127.0.0.1:8000/api/stocks/")
    print("   http://127.0.0.1:8000/api/dashboard/")

if __name__ == '__main__':
    main()
